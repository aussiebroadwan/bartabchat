// Package auth Code generated by swaggo/swag. DO NOT EDIT
package auth

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "AussieBroadWAN Team",
            "url": "https://github.com/aussiebroadwan/bartab"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/.well-known/jwks.json": {
            "get": {
                "description": "Returns the JSON Web Key Set used to verify JWTs.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "well-known"
                ],
                "summary": "Get JWKS",
                "responses": {
                    "200": {
                        "description": "The JSON Web Key Set",
                        "schema": {
                            "$ref": "#/definitions/authsdk.JWKSResponse"
                        }
                    }
                }
            }
        },
        "/livez": {
            "get": {
                "description": "Liveness probe endpoint returning basic service health status, uptime, and version information\nThis endpoint always returns 200 OK if the service is running",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Health Check Endpoint",
                "responses": {
                    "200": {
                        "description": "status, uptime, version",
                        "schema": {
                            "$ref": "#/definitions/authsdk.HealthResponse"
                        }
                    }
                }
            }
        },
        "/readyz": {
            "get": {
                "description": "Readiness probe endpoint returning service health status and checks for critical dependencies\nIncludes uptime, version, and status of database, signer, and cache components",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Readiness Check Endpoint",
                "responses": {
                    "200": {
                        "description": "status, uptime, version, checks",
                        "schema": {
                            "$ref": "#/definitions/authsdk.HealthResponse"
                        }
                    },
                    "503": {
                        "description": "status, uptime, version, checks - service not ready",
                        "schema": {
                            "$ref": "#/definitions/authsdk.HealthResponse"
                        }
                    }
                }
            }
        },
        "/v1/bootstrap": {
            "post": {
                "description": "Initializes the authentication service by creating the first admin user and OAuth2 client. This endpoint is only available when a bootstrap token is configured and can only be used once.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bootstrap"
                ],
                "summary": "Bootstrap the authentication system",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bootstrap token for authorization",
                        "name": "X-Bootstrap-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Bootstrap configuration",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authsdk.BootstrapRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully bootstrapped system with admin user and client IDs",
                        "schema": {
                            "$ref": "#/definitions/authsdk.BootstrapResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation failed",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ValidationErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid bootstrap token, or system already bootstrapped",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Bootstrap not enabled (no token configured)",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to create admin user or client",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/clients": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns all OAuth2 clients. Protected clients are flagged.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Clients"
                ],
                "summary": "List OAuth2 Clients",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token with admin:read scope",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of clients",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ListClientsResponse"
                        }
                    },
                    "401": {
                        "description": "error, error_description",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "error, error_description",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "error, error_description",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new OAuth2 client. If confidential=true, auto-generates a secret for client_credentials grant.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Clients"
                ],
                "summary": "Create OAuth2 Client",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token with admin:write scope",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Client creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authsdk.CreateClientRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "client_id and client_secret (if confidential)",
                        "schema": {
                            "$ref": "#/definitions/authsdk.CreateClientResponse"
                        }
                    },
                    "400": {
                        "description": "error, error_description",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "error, error_description",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "error, error_description",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "error, error_description",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/clients/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes an OAuth2 client by ID. Protected clients cannot be deleted.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Clients"
                ],
                "summary": "Delete OAuth2 Client",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token with admin:write scope",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Client ID (ULID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Client deleted successfully"
                    },
                    "400": {
                        "description": "error, error_description",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "error, error_description",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "error, error_description",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "error, error_description",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "error, error_description",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/invites/mint": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Mint a user invitation token for inviting new users for a specific client application. This is an admin-only operation.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invitations"
                ],
                "summary": "User Invitation Endpoint",
                "parameters": [
                    {
                        "description": "Invite request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authsdk.InviteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "invite_token, client_id, expires_at",
                        "schema": {
                            "$ref": "#/definitions/authsdk.InviteResponse"
                        }
                    },
                    "400": {
                        "description": "error, error_description",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "error, error_description",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "error, error_description",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/invites/redeem": {
            "post": {
                "description": "Redeem an invitation token to create a new user account",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invitations"
                ],
                "summary": "Redeem Invitation Endpoint",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invite token from mint endpoint",
                        "name": "invite_token",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Desired username",
                        "name": "username",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User password",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Client ID the invite was issued for",
                        "name": "client_id",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "user_id, username",
                        "schema": {
                            "$ref": "#/definitions/authsdk.RedeemInviteResponse"
                        }
                    },
                    "400": {
                        "description": "error, error_description",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "error, error_description",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/keys": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List all signing keys with their status (works in both ephemeral and persistent modes)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Keys"
                ],
                "summary": "List signing keys",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/authsdk.SigningKeyInfo"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - requires admin:read scope",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    },
                    "501": {
                        "description": "Not available in ephemeral mode",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/keys/rotate": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Generate a new signing key and optionally retire existing keys (works in both ephemeral and persistent modes)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Keys"
                ],
                "summary": "Rotate signing keys",
                "parameters": [
                    {
                        "description": "Rotation options",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authsdk.RotateKeyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/authsdk.RotateKeyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - requires admin:write scope",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/keys/{kid}/retire": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Mark a specific key as retired without generating a new one (works in both ephemeral and persistent modes)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Keys"
                ],
                "summary": "Retire a signing key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Key ID to retire",
                        "name": "kid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content - key retired successfully"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - requires admin:write scope",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Key not found",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    },
                    "501": {
                        "description": "Not available in ephemeral mode",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/mfa/backup-codes": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Regenerates backup codes for the user. Requires TOTP verification.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MFA"
                ],
                "summary": "Regenerate backup codes",
                "parameters": [
                    {
                        "description": "TOTP code for verification",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authsdk.BackupCodesRegenerateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New backup codes (shown once)",
                        "schema": {
                            "$ref": "#/definitions/authsdk.BackupCodesResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid TOTP code or request",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid or missing access token",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/mfa/totp": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Removes TOTP MFA for the user. Requires TOTP verification.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MFA"
                ],
                "summary": "Remove TOTP MFA",
                "parameters": [
                    {
                        "description": "TOTP code for verification",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authsdk.TOTPRemoveRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid TOTP code or request",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid or missing access token",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/mfa/totp/enroll": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Generates a TOTP secret for the authenticated user and returns it with a QR code.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MFA"
                ],
                "summary": "Enroll in TOTP MFA",
                "responses": {
                    "200": {
                        "description": "TOTP secret and QR code",
                        "schema": {
                            "$ref": "#/definitions/authsdk.TOTPEnrollResponse"
                        }
                    },
                    "400": {
                        "description": "MFA already enabled",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid or missing access token",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/mfa/totp/verify": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Verifies a TOTP code and enables MFA for the user. Returns backup codes.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MFA"
                ],
                "summary": "Verify TOTP code and enable MFA",
                "parameters": [
                    {
                        "description": "TOTP code",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authsdk.TOTPVerifyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Backup codes (shown once)",
                        "schema": {
                            "$ref": "#/definitions/authsdk.BackupCodesResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid TOTP code or request",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid or missing access token",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/oauth2/authorize": {
            "get": {
                "description": "Initiates the OAuth2 authorization code flow via GET request. Used for browser redirects.\nIf a valid session exists (cookie or Bearer token), issues authorization code immediately.\nOtherwise, returns 401 with login_required error.\n\n**PKCE Support:**\n- Public clients MUST include code_challenge (defaults to S256 if method omitted)\n- Confidential clients MAY include code_challenge for additional security\n\n**Response:**\n- Success: 302 redirect to redirect_uri with code and state parameters\n- No session: 401 JSON with login_required error\n- Error: JSON error response",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuth2"
                ],
                "summary": "OAuth2 authorization endpoint (GET)",
                "parameters": [
                    {
                        "type": "string",
                        "default": "code",
                        "description": "Must be 'code'",
                        "name": "response_type",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "OAuth2 client identifier",
                        "name": "client_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Callback URI (must match registered redirect URI)",
                        "name": "redirect_uri",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"profile:read admin:write\"",
                        "description": "Space-delimited list of scopes",
                        "name": "scope",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Opaque value for CSRF protection (recommended)",
                        "name": "state",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"E9Melhoa2OwvFrEMTJguCHaoeK1t8URWbuGJSstw-cM\"",
                        "description": "PKCE code challenge (required for public clients)",
                        "name": "code_challenge",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "S256",
                            "plain"
                        ],
                        "type": "string",
                        "default": "S256",
                        "description": "PKCE method (S256 or plain, defaults to S256)",
                        "name": "code_challenge_method",
                        "in": "query"
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Redirect to redirect_uri with code and state",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request\"\texample({\"error\":\"invalid_request\",\"error_description\":\"missing required parameter\"})",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized\"\t\texample({\"error\":\"login_required\",\"error_description\":\"user authentication required\"})",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Initiates the OAuth2 authorization code flow via POST request with credentials.\nSupports three authentication methods:\n- Session-based: Include session cookie or Bearer token in Authorization header\n- Username/Password: Submit credentials in POST body\n- MFA Completion: Submit mfa_token with mfa_method and mfa_code\n\n**PKCE Support:**\n- Public clients MUST include code_challenge (defaults to S256 if method omitted)\n- Confidential clients MAY include code_challenge for additional security\n\n**Response:**\n- Success: 302 redirect to redirect_uri with code and state parameters\n- MFA Required: 409 JSON response with mfa_token and available methods\n- Error: Either redirect with error parameters or JSON error response",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuth2"
                ],
                "summary": "OAuth2 authorization endpoint (POST)",
                "parameters": [
                    {
                        "type": "string",
                        "default": "code",
                        "description": "Must be 'code'",
                        "name": "response_type",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "OAuth2 client identifier",
                        "name": "client_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Callback URI (must match registered redirect URI)",
                        "name": "redirect_uri",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"profile:read admin:write\"",
                        "description": "Space-delimited list of scopes",
                        "name": "scope",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Opaque value for CSRF protection (recommended)",
                        "name": "state",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"E9Melhoa2OwvFrEMTJguCHaoeK1t8URWbuGJSstw-cM\"",
                        "description": "PKCE code challenge (required for public clients)",
                        "name": "code_challenge",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "S256",
                            "plain"
                        ],
                        "type": "string",
                        "default": "S256",
                        "description": "PKCE method (S256 or plain, defaults to S256)",
                        "name": "code_challenge_method",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Username for password authentication",
                        "name": "username",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Password for password authentication",
                        "name": "password",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "MFA token from previous 409 response",
                        "name": "mfa_token",
                        "in": "formData"
                    },
                    {
                        "enum": [
                            "totp",
                            "backup_codes"
                        ],
                        "type": "string",
                        "description": "MFA method (totp or backup_codes)",
                        "name": "mfa_method",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "MFA code (6-digit TOTP or backup code)",
                        "name": "mfa_code",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Redirect to redirect_uri with code and state",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request\"\texample({\"error\":\"invalid_request\",\"error_description\":\"missing required parameter\"})",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized\"\t\texample({\"error\":\"login_required\",\"error_description\":\"user authentication required\"})",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "MFA required\"\t\texample({\"error\":\"mfa_required\",\"error_description\":\"multi-factor authentication is required\",\"mfa_token\":\"token123\",\"mfa_methods\":[\"totp\",\"backup_codes\"]})",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/v1/oauth2/introspect": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Introspects a token and returns metadata about it (RFC 7662)",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuth2"
                ],
                "summary": "OAuth2 Token Introspection Endpoint",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The token to introspect",
                        "name": "token",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "enum": [
                            "access_token"
                        ],
                        "type": "string",
                        "description": "Hint about token type (currently only 'access_token' is supported)",
                        "name": "token_type_hint",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token introspection result",
                        "schema": {
                            "$ref": "#/definitions/http.IntrospectionResponse"
                        },
                        "headers": {
                            "Cache-Control": {
                                "type": "string",
                                "description": "no-store"
                            },
                            "Pragma": {
                                "type": "string",
                                "description": "no-cache"
                            }
                        }
                    },
                    "400": {
                        "description": "error, error_description",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "error, error_description",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/v1/oauth2/revoke": {
            "post": {
                "description": "Revokes a previously issued token (RFC 7009)\nCurrently supports revoking refresh tokens only. Access tokens expire naturally.\nThe endpoint is idempotent and returns 200 OK even for invalid/unknown tokens to prevent token scanning attacks.",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuth2"
                ],
                "summary": "OAuth2 Token Revocation Endpoint",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The token to revoke",
                        "name": "token",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "enum": [
                            "access_token",
                            "refresh_token"
                        ],
                        "type": "string",
                        "description": "Hint about token type",
                        "name": "token_type_hint",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token revoked successfully (or was already invalid)",
                        "headers": {
                            "Cache-Control": {
                                "type": "string",
                                "description": "no-store"
                            },
                            "Pragma": {
                                "type": "string",
                                "description": "no-cache"
                            }
                        }
                    },
                    "400": {
                        "description": "error, error_description",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "405": {
                        "description": "error, error_description",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/v1/oauth2/token": {
            "post": {
                "description": "Issues access and refresh tokens using OAuth2 grant types (authorization_code, refresh_token, client_credentials).",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuth2"
                ],
                "summary": "OAuth2 Token Endpoint",
                "parameters": [
                    {
                        "enum": [
                            "authorization_code",
                            "refresh_token",
                            "client_credentials"
                        ],
                        "type": "string",
                        "description": "Grant type",
                        "name": "grant_type",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Authorization code (required for authorization_code grant)",
                        "name": "code",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Redirect URI (required for authorization_code grant)",
                        "name": "redirect_uri",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "PKCE code_verifier (required when PKCE was used)",
                        "name": "code_verifier",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Refresh token (required for refresh_token grant)",
                        "name": "refresh_token",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Client identifier (required for all grants)",
                        "name": "client_id",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Client secret (required for confidential clients)",
                        "name": "client_secret",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Space-delimited list of scopes",
                        "name": "scope",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "access_token, refresh_token, token_type, expires_in, scope",
                        "schema": {
                            "$ref": "#/definitions/authsdk.TokenResponse"
                        },
                        "headers": {
                            "Cache-Control": {
                                "type": "string",
                                "description": "no-store"
                            },
                            "Pragma": {
                                "type": "string",
                                "description": "no-cache"
                            }
                        }
                    },
                    "400": {
                        "description": "error, error_description",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "error, error_description",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    },
                    "405": {
                        "description": "error, error_description",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "error, error_description",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/roles": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns a list of all available roles in the system. Requires admin:read scope.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "List all roles",
                "responses": {
                    "200": {
                        "description": "List of roles",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ListRolesResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - missing or invalid token",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - missing required scope",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/userinfo": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns information about the authenticated user. Requires 'profile:read' scope.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuth2"
                ],
                "summary": "Get user information",
                "responses": {
                    "200": {
                        "description": "User information (user_id, username, preferred_name, role)",
                        "schema": {
                            "$ref": "#/definitions/authsdk.UserInfoResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid or missing access token",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/authsdk.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "authsdk.BackupCodesRegenerateRequest": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "6-digit TOTP code for verification",
                    "type": "string"
                }
            }
        },
        "authsdk.BackupCodesResponse": {
            "type": "object",
            "properties": {
                "codes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "authsdk.BootstrapRequest": {
            "type": "object",
            "properties": {
                "admin_password": {
                    "description": "AdminPassword is the password for the admin user (8-128 chars)",
                    "type": "string"
                },
                "admin_preferred_name": {
                    "description": "AdminPreferredName is the display name for the admin user (max 64 chars)",
                    "type": "string"
                },
                "admin_username": {
                    "description": "AdminUsername is the username for the initial admin user (3-32 chars, alphanumeric with _ or -)",
                    "type": "string"
                },
                "client_name": {
                    "description": "ClientName is the name for the initial OAuth2 client (max 100 chars, alphanumeric with _ or -)",
                    "type": "string"
                },
                "client_scopes": {
                    "description": "ClientScopes is a space-delimited list of scopes for the client (e.g., [\"profile:read\", \"users:write\"])",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "roles": {
                    "description": "Roles is a list of role definitions to create during bootstrap (must include \"admin\" role)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/authsdk.RoleDefinition"
                    }
                }
            }
        },
        "authsdk.BootstrapResponse": {
            "type": "object",
            "properties": {
                "admin_user_id": {
                    "description": "AdminUserID is the unique identifier of the created admin user",
                    "type": "string"
                },
                "client_id": {
                    "description": "ClientID is the unique identifier of the created OAuth2 client",
                    "type": "string"
                },
                "client_secret": {
                    "description": "ClientSecret is the plaintext secret for the created confidential client (only returned once)",
                    "type": "string"
                }
            }
        },
        "authsdk.ClientInfo": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt is the timestamp when the client was created (RFC3339 format)",
                    "type": "string"
                },
                "has_secret": {
                    "description": "HasSecret indicates whether this client has a secret (confidential client)",
                    "type": "boolean"
                },
                "id": {
                    "description": "ID is the unique identifier for the client",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the human-readable name of the client",
                    "type": "string"
                },
                "protected": {
                    "description": "Protected indicates whether this client is protected from deletion",
                    "type": "boolean"
                },
                "scopes": {
                    "description": "Scopes is the list of scopes this client can grant",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "authsdk.CreateClientRequest": {
            "type": "object",
            "properties": {
                "confidential": {
                    "description": "Confidential indicates whether to create a confidential client with a secret.\nIf true, a secret will be auto-generated and returned once.\nIf false, creates a public client (no secret, cannot use client_credentials grant).",
                    "type": "boolean"
                },
                "name": {
                    "description": "Name is the human-readable name for the client",
                    "type": "string"
                },
                "scopes": {
                    "description": "Scopes is the list of scopes this client is authorized to grant",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "authsdk.CreateClientResponse": {
            "type": "object",
            "properties": {
                "client_id": {
                    "description": "ClientID is the unique identifier for the created client",
                    "type": "string"
                },
                "client_secret": {
                    "description": "ClientSecret is the plaintext secret (only returned once at creation).\nWill be empty if no secret was provided in the request.",
                    "type": "string"
                }
            }
        },
        "authsdk.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Error is the OAuth2 error code (e.g., \"invalid_request\", \"invalid_grant\")",
                    "type": "string"
                },
                "error_description": {
                    "description": "ErrorDescription is a human-readable description of the error",
                    "type": "string"
                }
            }
        },
        "authsdk.HealthChecks": {
            "type": "object",
            "properties": {
                "database": {
                    "description": "Database indicates the database connection status",
                    "type": "string"
                },
                "signer": {
                    "description": "Signer indicates the JWT signing capability status",
                    "type": "string"
                }
            }
        },
        "authsdk.HealthResponse": {
            "type": "object",
            "properties": {
                "checks": {
                    "description": "Checks contains readiness check results for critical dependencies (only for /readyz)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/authsdk.HealthChecks"
                        }
                    ]
                },
                "status": {
                    "description": "Status indicates the overall health status (e.g., \"ok\")",
                    "type": "string"
                },
                "uptime": {
                    "description": "Uptime is the service uptime duration as a string (e.g., \"1h23m45s\")",
                    "type": "string"
                },
                "version": {
                    "description": "Version is the service version string",
                    "type": "string"
                }
            }
        },
        "authsdk.InviteRequest": {
            "type": "object",
            "properties": {
                "client_id": {
                    "type": "string"
                },
                "expires_at": {
                    "description": "epoch time in seconds (1 day from creation if omitted)",
                    "type": "integer"
                },
                "reusable": {
                    "description": "default false",
                    "type": "boolean"
                },
                "role_id": {
                    "description": "Role to assign to the invited user",
                    "type": "string"
                }
            }
        },
        "authsdk.InviteResponse": {
            "type": "object",
            "properties": {
                "client_id": {
                    "type": "string"
                },
                "expires_at": {
                    "description": "epoch time in seconds",
                    "type": "integer"
                },
                "invite_token": {
                    "type": "string"
                }
            }
        },
        "authsdk.JWKSResponse": {
            "type": "object",
            "properties": {
                "keys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/jwtx.JWK"
                    }
                }
            }
        },
        "authsdk.ListClientsResponse": {
            "type": "object",
            "properties": {
                "clients": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/authsdk.ClientInfo"
                    }
                }
            }
        },
        "authsdk.ListRolesResponse": {
            "type": "object",
            "properties": {
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/authsdk.RoleInfo"
                    }
                }
            }
        },
        "authsdk.RedeemInviteResponse": {
            "type": "object",
            "properties": {
                "user_id": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "authsdk.RoleDefinition": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name is the role name (e.g., \"admin\", \"user\", \"readonly\")",
                    "type": "string"
                },
                "scopes": {
                    "description": "Scopes is a space-delimited list of scopes this role can request",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "authsdk.RoleInfo": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "authsdk.RotateKeyRequest": {
            "type": "object",
            "properties": {
                "retire_existing": {
                    "description": "RetireExisting will mark current active keys as retired if true.\nIf false, new key is added alongside existing keys.",
                    "type": "boolean"
                }
            }
        },
        "authsdk.RotateKeyResponse": {
            "type": "object",
            "properties": {
                "active_keys": {
                    "type": "integer"
                },
                "new_key": {
                    "$ref": "#/definitions/authsdk.SigningKeyInfo"
                },
                "retired_keys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/authsdk.SigningKeyInfo"
                    }
                }
            }
        },
        "authsdk.SigningKeyInfo": {
            "type": "object",
            "properties": {
                "algorithm": {
                    "description": "RS256, ES256, or EdDSA",
                    "type": "string"
                },
                "created_at": {
                    "description": "RFC3339 timestamp",
                    "type": "string"
                },
                "expires_at": {
                    "description": "RFC3339 timestamp",
                    "type": "string"
                },
                "id": {
                    "description": "ULID",
                    "type": "string"
                },
                "kid": {
                    "description": "Key identifier in JWKS",
                    "type": "string"
                },
                "retired_at": {
                    "description": "RFC3339 timestamp (null if active)",
                    "type": "string"
                }
            }
        },
        "authsdk.TOTPEnrollResponse": {
            "type": "object",
            "properties": {
                "account": {
                    "type": "string"
                },
                "issuer": {
                    "type": "string"
                },
                "qr_code": {
                    "type": "string",
                    "example": "otpauth://totp/issuer:user@example.com?secret=JBSWY3DPEHPK3PXP\u0026issuer=issuer"
                },
                "secret": {
                    "type": "string",
                    "example": "JBSWY3DPEHPK3PXP"
                }
            }
        },
        "authsdk.TOTPRemoveRequest": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "6-digit TOTP code for verification",
                    "type": "string"
                }
            }
        },
        "authsdk.TOTPVerifyRequest": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "6-digit TOTP code",
                    "type": "string"
                }
            }
        },
        "authsdk.TokenResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "description": "AccessToken is the JWT access token used to authenticate API requests",
                    "type": "string"
                },
                "expires_in": {
                    "description": "ExpiresIn is the lifetime in seconds of the access token",
                    "type": "integer"
                },
                "refresh_token": {
                    "description": "RefreshToken is the opaque refresh token used to obtain new access tokens",
                    "type": "string"
                },
                "scope": {
                    "description": "Scope is the space-delimited list of scopes granted to this token",
                    "type": "string"
                },
                "token_type": {
                    "description": "TokenType is always \"Bearer\" per OAuth2 spec",
                    "type": "string"
                }
            }
        },
        "authsdk.UserInfoResponse": {
            "type": "object",
            "properties": {
                "preferred_name": {
                    "description": "PreferredName is the user's display name",
                    "type": "string"
                },
                "role": {
                    "description": "Role is the name of the user's role",
                    "type": "string"
                },
                "user_id": {
                    "description": "UserID is the unique identifier for the user",
                    "type": "string"
                },
                "username": {
                    "description": "Username is the user's login username",
                    "type": "string"
                }
            }
        },
        "authsdk.ValidationErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Code is the error code (e.g., \"validation_error\")",
                    "type": "string"
                },
                "details": {
                    "description": "Details contains field-specific validation errors (field name: error message)",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "message": {
                    "description": "Message is a human-readable error message",
                    "type": "string"
                }
            }
        },
        "http.IntrospectionResponse": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "amr": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "aud": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "client_id": {
                    "type": "string"
                },
                "exp": {
                    "type": "integer"
                },
                "iat": {
                    "type": "integer"
                },
                "iss": {
                    "type": "string"
                },
                "jti": {
                    "type": "string"
                },
                "nbf": {
                    "type": "integer"
                },
                "preferred_name": {
                    "type": "string"
                },
                "scope": {
                    "description": "Optional fields (only present when active=true)",
                    "type": "string"
                },
                "sid": {
                    "type": "string"
                },
                "sub": {
                    "type": "string"
                },
                "token_type": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "jwtx.JWK": {
            "type": "object",
            "properties": {
                "alg": {
                    "description": "algorithm: \"RS256\"; Later: \"EdDSA\", etc.",
                    "type": "string"
                },
                "crv": {
                    "description": "Ed25519 / OKP fields and ECDSA / EC fields",
                    "type": "string"
                },
                "e": {
                    "description": "exponent (base64url)",
                    "type": "string"
                },
                "kid": {
                    "description": "key ID",
                    "type": "string"
                },
                "kty": {
                    "description": "key type: \"RSA\"; Later: \"OKP\", \"EC\"",
                    "type": "string"
                },
                "n": {
                    "description": "RSA stuff",
                    "type": "string"
                },
                "use": {
                    "description": "what we use it for: \"sig\", \"enc\"",
                    "type": "string"
                },
                "x": {
                    "description": "base64url encoded public key or x-coordinate",
                    "type": "string"
                },
                "y": {
                    "description": "base64url encoded y-coordinate (ECDSA only)",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "JWT access token. Format: \"Bearer {token}\".",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{"http", "https"},
	Title:            "BarTab Authentication Service API",
	Description:      "Attempting to be OAuth2-compliant for our authentication service providing token management with JWT-based access tokens.\n\nAll tokens are signed using RS256 (RSA-SHA256) and can be verified using the JWKS endpoint.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
