// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: clients.sql

package gen

import (
	"context"
	"database/sql"
)

const countClients = `-- name: CountClients :one
SELECT COUNT(*) FROM clients
`

func (q *Queries) CountClients(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countClients)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createClient = `-- name: CreateClient :exec
INSERT INTO clients (id, name, secret_hash, scopes, protected)
VALUES (?, ?, ?, ?, ?)
`

type CreateClientParams struct {
	ID         string
	Name       string
	SecretHash sql.NullString
	Scopes     string
	Protected  bool
}

func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) error {
	_, err := q.db.ExecContext(ctx, createClient,
		arg.ID,
		arg.Name,
		arg.SecretHash,
		arg.Scopes,
		arg.Protected,
	)
	return err
}

const deleteClient = `-- name: DeleteClient :exec
DELETE FROM clients
WHERE id = ?
`

func (q *Queries) DeleteClient(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteClient, id)
	return err
}

const getClientByID = `-- name: GetClientByID :one
SELECT id, name, secret_hash, scopes, protected, created_at, updated_at
FROM clients
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetClientByID(ctx context.Context, id string) (Client, error) {
	row := q.db.QueryRowContext(ctx, getClientByID, id)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SecretHash,
		&i.Scopes,
		&i.Protected,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listClients = `-- name: ListClients :many
SELECT id, name, secret_hash, scopes, protected, created_at, updated_at
FROM clients
ORDER BY created_at DESC
`

func (q *Queries) ListClients(ctx context.Context) ([]Client, error) {
	rows, err := q.db.QueryContext(ctx, listClients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Client
	for rows.Next() {
		var i Client
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.SecretHash,
			&i.Scopes,
			&i.Protected,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClientName = `-- name: UpdateClientName :exec
UPDATE clients
SET name = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateClientNameParams struct {
	Name string
	ID   string
}

func (q *Queries) UpdateClientName(ctx context.Context, arg UpdateClientNameParams) error {
	_, err := q.db.ExecContext(ctx, updateClientName, arg.Name, arg.ID)
	return err
}

const updateClientScopes = `-- name: UpdateClientScopes :exec
UPDATE clients
SET scopes = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateClientScopesParams struct {
	Scopes string
	ID     string
}

func (q *Queries) UpdateClientScopes(ctx context.Context, arg UpdateClientScopesParams) error {
	_, err := q.db.ExecContext(ctx, updateClientScopes, arg.Scopes, arg.ID)
	return err
}

const updateClientSecretHash = `-- name: UpdateClientSecretHash :exec
UPDATE clients
SET secret_hash = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateClientSecretHashParams struct {
	SecretHash sql.NullString
	ID         string
}

func (q *Queries) UpdateClientSecretHash(ctx context.Context, arg UpdateClientSecretHashParams) error {
	_, err := q.db.ExecContext(ctx, updateClientSecretHash, arg.SecretHash, arg.ID)
	return err
}
