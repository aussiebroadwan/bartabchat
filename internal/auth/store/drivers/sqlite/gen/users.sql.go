// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package gen

import (
	"context"
	"database/sql"
)

const countUsers = `-- name: CountUsers :one
SELECT COUNT(*) FROM users
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id, username, preferred_name, password_hash, role_id)
VALUES (?, ?, ?, ?, ?)
`

type CreateUserParams struct {
	ID            string
	Username      string
	PreferredName string
	PasswordHash  string
	RoleID        string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.PreferredName,
		arg.PasswordHash,
		arg.RoleID,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const disableUserMFA = `-- name: DisableUserMFA :exec
UPDATE users
SET mfa_enabled = NULL, mfa_secret = NULL, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

func (q *Queries) DisableUserMFA(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, disableUserMFA, id)
	return err
}

const enableUserMFA = `-- name: EnableUserMFA :exec
UPDATE users
SET mfa_enabled = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

func (q *Queries) EnableUserMFA(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, enableUserMFA, id)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, preferred_name, password_hash, role_id, mfa_enabled, mfa_secret, created_at, updated_at
FROM users
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PreferredName,
		&i.PasswordHash,
		&i.RoleID,
		&i.MfaEnabled,
		&i.MfaSecret,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, preferred_name, password_hash, role_id, mfa_enabled, mfa_secret, created_at, updated_at
FROM users
WHERE username = ?
LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PreferredName,
		&i.PasswordHash,
		&i.RoleID,
		&i.MfaEnabled,
		&i.MfaSecret,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserMFAInfo = `-- name: GetUserMFAInfo :one
SELECT id, mfa_enabled, mfa_secret
FROM users
WHERE id = ?
LIMIT 1
`

type GetUserMFAInfoRow struct {
	ID         string
	MfaEnabled sql.NullTime
	MfaSecret  sql.NullString
}

func (q *Queries) GetUserMFAInfo(ctx context.Context, id string) (GetUserMFAInfoRow, error) {
	row := q.db.QueryRowContext(ctx, getUserMFAInfo, id)
	var i GetUserMFAInfoRow
	err := row.Scan(&i.ID, &i.MfaEnabled, &i.MfaSecret)
	return i, err
}

const updateUserMFASecret = `-- name: UpdateUserMFASecret :exec
UPDATE users
SET mfa_secret = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateUserMFASecretParams struct {
	MfaSecret sql.NullString
	ID        string
}

func (q *Queries) UpdateUserMFASecret(ctx context.Context, arg UpdateUserMFASecretParams) error {
	_, err := q.db.ExecContext(ctx, updateUserMFASecret, arg.MfaSecret, arg.ID)
	return err
}

const updateUserPasswordHash = `-- name: UpdateUserPasswordHash :exec
UPDATE users
SET password_hash = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateUserPasswordHashParams struct {
	PasswordHash string
	ID           string
}

func (q *Queries) UpdateUserPasswordHash(ctx context.Context, arg UpdateUserPasswordHashParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPasswordHash, arg.PasswordHash, arg.ID)
	return err
}

const updateUserPreferredName = `-- name: UpdateUserPreferredName :exec
UPDATE users
SET preferred_name = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateUserPreferredNameParams struct {
	PreferredName string
	ID            string
}

func (q *Queries) UpdateUserPreferredName(ctx context.Context, arg UpdateUserPreferredNameParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPreferredName, arg.PreferredName, arg.ID)
	return err
}
