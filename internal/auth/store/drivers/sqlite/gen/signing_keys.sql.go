// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: signing_keys.sql

package gen

import (
	"context"
	"time"
)

const createSigningKey = `-- name: CreateSigningKey :exec
INSERT INTO signing_keys (id, kid, algorithm, private_key_encrypted, created_at, expires_at)
VALUES (?, ?, ?, ?, ?, ?)
`

type CreateSigningKeyParams struct {
	ID                  string
	Kid                 string
	Algorithm           string
	PrivateKeyEncrypted []byte
	CreatedAt           time.Time
	ExpiresAt           time.Time
}

func (q *Queries) CreateSigningKey(ctx context.Context, arg CreateSigningKeyParams) error {
	_, err := q.db.ExecContext(ctx, createSigningKey,
		arg.ID,
		arg.Kid,
		arg.Algorithm,
		arg.PrivateKeyEncrypted,
		arg.CreatedAt,
		arg.ExpiresAt,
	)
	return err
}

const deleteExpiredSigningKeys = `-- name: DeleteExpiredSigningKeys :exec
DELETE FROM signing_keys
WHERE expires_at < CURRENT_TIMESTAMP
`

func (q *Queries) DeleteExpiredSigningKeys(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredSigningKeys)
	return err
}

const getSigningKeyByKid = `-- name: GetSigningKeyByKid :one
SELECT id, kid, algorithm, private_key_encrypted, created_at, retired_at, expires_at
FROM signing_keys
WHERE kid = ?
LIMIT 1
`

func (q *Queries) GetSigningKeyByKid(ctx context.Context, kid string) (SigningKey, error) {
	row := q.db.QueryRowContext(ctx, getSigningKeyByKid, kid)
	var i SigningKey
	err := row.Scan(
		&i.ID,
		&i.Kid,
		&i.Algorithm,
		&i.PrivateKeyEncrypted,
		&i.CreatedAt,
		&i.RetiredAt,
		&i.ExpiresAt,
	)
	return i, err
}

const listActiveSigningKeys = `-- name: ListActiveSigningKeys :many
SELECT id, kid, algorithm, private_key_encrypted, created_at, retired_at, expires_at
FROM signing_keys
WHERE retired_at IS NULL
  AND expires_at > CURRENT_TIMESTAMP
ORDER BY created_at DESC
`

func (q *Queries) ListActiveSigningKeys(ctx context.Context) ([]SigningKey, error) {
	rows, err := q.db.QueryContext(ctx, listActiveSigningKeys)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SigningKey
	for rows.Next() {
		var i SigningKey
		if err := rows.Scan(
			&i.ID,
			&i.Kid,
			&i.Algorithm,
			&i.PrivateKeyEncrypted,
			&i.CreatedAt,
			&i.RetiredAt,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllSigningKeys = `-- name: ListAllSigningKeys :many
SELECT id, kid, algorithm, private_key_encrypted, created_at, retired_at, expires_at
FROM signing_keys
ORDER BY created_at DESC
`

func (q *Queries) ListAllSigningKeys(ctx context.Context) ([]SigningKey, error) {
	rows, err := q.db.QueryContext(ctx, listAllSigningKeys)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SigningKey
	for rows.Next() {
		var i SigningKey
		if err := rows.Scan(
			&i.ID,
			&i.Kid,
			&i.Algorithm,
			&i.PrivateKeyEncrypted,
			&i.CreatedAt,
			&i.RetiredAt,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const retireSigningKey = `-- name: RetireSigningKey :exec
UPDATE signing_keys
SET retired_at = CURRENT_TIMESTAMP
WHERE kid = ?
  AND retired_at IS NULL
`

func (q *Queries) RetireSigningKey(ctx context.Context, kid string) error {
	_, err := q.db.ExecContext(ctx, retireSigningKey, kid)
	return err
}
