// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refresh_tokens.sql

package gen

import (
	"context"
	"time"
)

const createRefreshToken = `-- name: CreateRefreshToken :exec
INSERT INTO refresh_tokens (id, user_id, client_id, token_hash, session_id, scopes, amr, expires_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateRefreshTokenParams struct {
	ID        string
	UserID    string
	ClientID  string
	TokenHash string
	SessionID string
	Scopes    string
	Amr       string
	ExpiresAt time.Time
}

// Create a new refresh token for a user+client.
// (token_hash is unique; scopes is the granted, space-delimited string)
func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, createRefreshToken,
		arg.ID,
		arg.UserID,
		arg.ClientID,
		arg.TokenHash,
		arg.SessionID,
		arg.Scopes,
		arg.Amr,
		arg.ExpiresAt,
	)
	return err
}

const deleteExpiredRefreshTokens = `-- name: DeleteExpiredRefreshTokens :exec
DELETE FROM refresh_tokens
WHERE expires_at <= CURRENT_TIMESTAMP
`

// Housekeeping: delete expired tokens (optional cron/maintenance).
func (q *Queries) DeleteExpiredRefreshTokens(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredRefreshTokens)
	return err
}

const getRefreshTokenByHash = `-- name: GetRefreshTokenByHash :one
SELECT id, user_id, client_id, token_hash, session_id, scopes, amr, expires_at, revoked, created_at, updated_at
FROM refresh_tokens
WHERE token_hash = ?
  AND revoked = 0
  AND expires_at > CURRENT_TIMESTAMP
LIMIT 1
`

// Fetch by token hash (for refresh flow).
// Strict valid token lookup (not expired, not revoked).
func (q *Queries) GetRefreshTokenByHash(ctx context.Context, tokenHash string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getRefreshTokenByHash, tokenHash)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ClientID,
		&i.TokenHash,
		&i.SessionID,
		&i.Scopes,
		&i.Amr,
		&i.ExpiresAt,
		&i.Revoked,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const revokeAllUserClientRefreshTokens = `-- name: RevokeAllUserClientRefreshTokens :exec
UPDATE refresh_tokens
SET revoked = 1, updated_at = CURRENT_TIMESTAMP
WHERE user_id = ? AND client_id = ? AND revoked = 0
`

type RevokeAllUserClientRefreshTokensParams struct {
	UserID   string
	ClientID string
}

// Bulk revoke all tokens for a user+client (e.g., when resetting credentials).
func (q *Queries) RevokeAllUserClientRefreshTokens(ctx context.Context, arg RevokeAllUserClientRefreshTokensParams) error {
	_, err := q.db.ExecContext(ctx, revokeAllUserClientRefreshTokens, arg.UserID, arg.ClientID)
	return err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :exec
UPDATE refresh_tokens
SET revoked = 1, updated_at = CURRENT_TIMESTAMP
WHERE token_hash = ?
`

// Mark a token as revoked (e.g., on logout or rotation).
func (q *Queries) RevokeRefreshToken(ctx context.Context, tokenHash string) error {
	_, err := q.db.ExecContext(ctx, revokeRefreshToken, tokenHash)
	return err
}
