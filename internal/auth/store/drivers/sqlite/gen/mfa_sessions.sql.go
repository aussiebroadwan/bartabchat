// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: mfa_sessions.sql

package gen

import (
	"context"
	"time"
)

const createMFASession = `-- name: CreateMFASession :exec
INSERT INTO mfa_sessions (id, user_id, client_id, scopes, amr, session_id, expires_at)
VALUES (?, ?, ?, ?, ?, ?, ?)
`

type CreateMFASessionParams struct {
	ID        string
	UserID    string
	ClientID  string
	Scopes    string
	Amr       string
	SessionID string
	ExpiresAt time.Time
}

func (q *Queries) CreateMFASession(ctx context.Context, arg CreateMFASessionParams) error {
	_, err := q.db.ExecContext(ctx, createMFASession,
		arg.ID,
		arg.UserID,
		arg.ClientID,
		arg.Scopes,
		arg.Amr,
		arg.SessionID,
		arg.ExpiresAt,
	)
	return err
}

const deleteExpiredMFASessions = `-- name: DeleteExpiredMFASessions :exec
DELETE FROM mfa_sessions
WHERE expires_at <= CURRENT_TIMESTAMP
`

func (q *Queries) DeleteExpiredMFASessions(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredMFASessions)
	return err
}

const deleteMFASession = `-- name: DeleteMFASession :exec
DELETE FROM mfa_sessions
WHERE id = ?
`

func (q *Queries) DeleteMFASession(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteMFASession, id)
	return err
}

const getMFASession = `-- name: GetMFASession :one
SELECT id, user_id, client_id, scopes, amr, session_id, attempts, created_at, expires_at
FROM mfa_sessions
WHERE id = ? AND expires_at > CURRENT_TIMESTAMP
LIMIT 1
`

func (q *Queries) GetMFASession(ctx context.Context, id string) (MfaSession, error) {
	row := q.db.QueryRowContext(ctx, getMFASession, id)
	var i MfaSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ClientID,
		&i.Scopes,
		&i.Amr,
		&i.SessionID,
		&i.Attempts,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const incrementMFASessionAttempts = `-- name: IncrementMFASessionAttempts :one
UPDATE mfa_sessions
SET attempts = attempts + 1
WHERE id = ? AND expires_at > CURRENT_TIMESTAMP
RETURNING id, user_id, client_id, scopes, amr, session_id, attempts, created_at, expires_at
`

func (q *Queries) IncrementMFASessionAttempts(ctx context.Context, id string) (MfaSession, error) {
	row := q.db.QueryRowContext(ctx, incrementMFASessionAttempts, id)
	var i MfaSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ClientID,
		&i.Scopes,
		&i.Amr,
		&i.SessionID,
		&i.Attempts,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}
