// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: roles.sql

package gen

import (
	"context"
)

const countRoles = `-- name: CountRoles :one
SELECT COUNT(*) FROM roles
`

func (q *Queries) CountRoles(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countRoles)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createRole = `-- name: CreateRole :exec
INSERT INTO roles (id, name, scopes)
VALUES (?, ?, ?)
`

type CreateRoleParams struct {
	ID     string
	Name   string
	Scopes string
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) error {
	_, err := q.db.ExecContext(ctx, createRole, arg.ID, arg.Name, arg.Scopes)
	return err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles
WHERE id = ?
`

func (q *Queries) DeleteRole(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteRole, id)
	return err
}

const getRoleByID = `-- name: GetRoleByID :one
SELECT id, name, scopes, created_at, updated_at
FROM roles
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetRoleByID(ctx context.Context, id string) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRoleByID, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Scopes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRoleByName = `-- name: GetRoleByName :one
SELECT id, name, scopes, created_at, updated_at
FROM roles
WHERE name = ?
LIMIT 1
`

func (q *Queries) GetRoleByName(ctx context.Context, name string) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRoleByName, name)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Scopes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAllRoles = `-- name: ListAllRoles :many
SELECT id, name, scopes, created_at, updated_at
FROM roles
ORDER BY name ASC
`

func (q *Queries) ListAllRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, listAllRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Scopes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRoleScopes = `-- name: UpdateRoleScopes :exec
UPDATE roles
SET scopes = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateRoleScopesParams struct {
	Scopes string
	ID     string
}

func (q *Queries) UpdateRoleScopes(ctx context.Context, arg UpdateRoleScopesParams) error {
	_, err := q.db.ExecContext(ctx, updateRoleScopes, arg.Scopes, arg.ID)
	return err
}
