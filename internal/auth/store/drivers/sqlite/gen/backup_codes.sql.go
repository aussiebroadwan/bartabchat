// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: backup_codes.sql

package gen

import (
	"context"
)

const countUserBackupCodes = `-- name: CountUserBackupCodes :one
SELECT COUNT(*)
FROM backup_codes
WHERE user_id = ?
`

func (q *Queries) CountUserBackupCodes(ctx context.Context, userID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUserBackupCodes, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createBackupCode = `-- name: CreateBackupCode :exec
INSERT INTO backup_codes (user_id, code_hash)
VALUES (?, ?)
`

type CreateBackupCodeParams struct {
	UserID   string
	CodeHash string
}

func (q *Queries) CreateBackupCode(ctx context.Context, arg CreateBackupCodeParams) error {
	_, err := q.db.ExecContext(ctx, createBackupCode, arg.UserID, arg.CodeHash)
	return err
}

const deleteAllBackupCodes = `-- name: DeleteAllBackupCodes :exec
DELETE FROM backup_codes
WHERE user_id = ?
`

func (q *Queries) DeleteAllBackupCodes(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteAllBackupCodes, userID)
	return err
}

const deleteBackupCode = `-- name: DeleteBackupCode :exec
DELETE FROM backup_codes
WHERE user_id = ? AND code_hash = ?
`

type DeleteBackupCodeParams struct {
	UserID   string
	CodeHash string
}

func (q *Queries) DeleteBackupCode(ctx context.Context, arg DeleteBackupCodeParams) error {
	_, err := q.db.ExecContext(ctx, deleteBackupCode, arg.UserID, arg.CodeHash)
	return err
}

const getBackupCodeHash = `-- name: GetBackupCodeHash :one
SELECT code_hash
FROM backup_codes
WHERE user_id = ? AND code_hash = ?
LIMIT 1
`

type GetBackupCodeHashParams struct {
	UserID   string
	CodeHash string
}

func (q *Queries) GetBackupCodeHash(ctx context.Context, arg GetBackupCodeHashParams) (string, error) {
	row := q.db.QueryRowContext(ctx, getBackupCodeHash, arg.UserID, arg.CodeHash)
	var code_hash string
	err := row.Scan(&code_hash)
	return code_hash, err
}
